import { S as SvelteComponentDev, i as init, d as dispatch_dev, L as globals, I as not_equal, J as validate_each_argument, K as validate_each_keys, v as validate_slots, F as empty, A as create_component, B as claim_component, l as insert_dev, C as mount_component, r as transition_in, w as transition_out, b as detach_dev, E as destroy_component, e as element, t as text, f as claim_element, g as children, h as claim_text, j as attr_dev, k as add_location, m as append_dev, a as space, q as query_selector_all, c as claim_space, P as update_keyed_each, H as check_outros, G as group_outros, T as outro_and_destroy_block } from './client.4f3154ca.js';

/* src/routes/[list]/[page].svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;
const file = "src/routes/[list]/[page].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (151:2) {#each adhoc as adhoc (adhoc.id)}
function create_each_block(key_1, ctx) {
	let first;
	let post;
	let current;

	post = new Post({
			props: { adhoc: /*adhoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(post.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(post.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(post, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const post_changes = {};
			if (dirty & /*adhoc*/ 1) post_changes.adhoc = /*adhoc*/ ctx[0];
			post.$set(post_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(post.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(post.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(post, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(151:2) {#each adhoc as adhoc (adhoc.id)}",
		ctx
	});

	return block;
}

// (170:2) {#if next}
function create_if_block(ctx) {
	let a;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			t = text("More...");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "More...");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "more svelte-1u9c2pz");
			attr_dev(a, "href", /*next*/ ctx[1]);
			add_location(a, file, 170, 3, 3460);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*next*/ 2) {
				attr_dev(a, "href", /*next*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(170:2) {#if next}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let header;
	let h1;
	let t1;
	let t2;
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t3;
	let current;
	let each_value = /*adhoc*/ ctx[0];
	validate_each_argument(each_value);
	const get_key = ctx => /*adhoc*/ ctx[0].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	let if_block = /*next*/ ctx[1] && create_if_block(ctx);

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			header = element("header");
			h1 = element("h1");
			t1 = text("Board");
			t2 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-ygz96u\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Board");
			h1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t3 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Browse";
			add_location(h1, file, 147, 2, 2896);
			attr_dev(header, "class", "svelte-1u9c2pz");
			add_location(header, file, 146, 1, 2885);
			attr_dev(div, "class", "svelte-1u9c2pz");
			add_location(div, file, 149, 1, 2923);
			attr_dev(section, "class", "svelte-1u9c2pz");
			add_location(section, file, 145, 0, 2874);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, header);
			append_dev(header, h1);
			append_dev(h1, t1);
			append_dev(section, t2);
			append_dev(section, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t3);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*adhoc*/ 1) {
				const each_value = /*adhoc*/ ctx[0];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, t3, get_each_context);
				check_outros();
			}

			if (/*next*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, limit) {
	// URL
	// const url = `https://6016e904f534300017a4509d.mockapi.io/board?page=${page}&limit=${limit}`;
	const url = `https://6016e904f534300017a4509d.mockapi.io/board`;

	// Fetch
	const res = await this.fetch(url);

	// Validate
	if (res.status === 200) {
		const adhoc = await res.json();
		return { adhoc };
	}

	// Error
	this.error(500, "Problems with server. Be right back soon ;)");
}

function instance($$self, $$props, $$invalidate) {
	let { adhoc = [] } = $$props;
	let { checkgroup = [] } = $$props;
	let { page } = $$props;
	let { limit = 10 } = $$props;
	const writable_props = ["adhoc", "checkgroup", "page", "limit"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<U5Bpageu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bpageu5D", $$slots, []);

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("checkgroup" in $$props) $$invalidate(2, checkgroup = $$props.checkgroup);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("limit" in $$props) $$invalidate(4, limit = $$props.limit);
	};

	$$self.$capture_state = () => ({
		preload,
		adhoc,
		checkgroup,
		page,
		limit,
		next
	});

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("checkgroup" in $$props) $$invalidate(2, checkgroup = $$props.checkgroup);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("limit" in $$props) $$invalidate(4, limit = $$props.limit);
		if ("next" in $$props) $$invalidate(1, next = $$props.next);
	};

	let next;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*adhoc*/ 1) {
			// DEVELOPER_CONSOLE_LOG
			 console.log("%c BROWSE adhoc ", "color:blue; font-weight:bold; font-size:14px", adhoc);
		}

		if ($$self.$$.dirty & /*checkgroup*/ 4) {
			 console.log("%c BROWSE Checkgroup ", "color:green; font-weight:bold; font-size:14px", checkgroup);
		}
	};

	 $$invalidate(1, next = "/2/10");
	return [adhoc, next, checkgroup, page, limit];
}

class U5Bpageu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, not_equal, {
			adhoc: 0,
			checkgroup: 2,
			page: 3,
			limit: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bpageu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*page*/ ctx[3] === undefined && !("page" in props)) {
			console_1.warn("<U5Bpageu5D> was created without expected prop 'page'");
		}
	}

	get adhoc() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checkgroup() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checkgroup(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get page() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get limit() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set limit(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bpageu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3BhZ2VdLjZiZTZjYjc5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL1tsaXN0XS9bcGFnZV0uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjwhLS0gU2VydmVyIC0tPlxuPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHBhZ2UsIGxpbWl0KSB7XG5cdFx0Ly8gVVJMXG5cdFx0Ly8gY29uc3QgdXJsID0gYGh0dHBzOi8vNjAxNmU5MDRmNTM0MzAwMDE3YTQ1MDlkLm1vY2thcGkuaW8vYm9hcmQ/cGFnZT0ke3BhZ2V9JmxpbWl0PSR7bGltaXR9YDtcblx0XHRjb25zdCB1cmwgPSBgaHR0cHM6Ly82MDE2ZTkwNGY1MzQzMDAwMTdhNDUwOWQubW9ja2FwaS5pby9ib2FyZGA7XG5cdFx0Ly8gRmV0Y2hcblx0XHRjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKHVybCk7XG5cdFx0Ly8gVmFsaWRhdGVcblx0XHRpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRjb25zdCBhZGhvYyA9IGF3YWl0IHJlcy5qc29uKCk7XG5cdFx0XHRyZXR1cm4geyBhZGhvYyB9O1xuXHRcdH1cblx0XHQvLyBFcnJvclxuXHRcdHRoaXMuZXJyb3IoNTAwLCBcIlByb2JsZW1zIHdpdGggc2VydmVyLiBCZSByaWdodCBiYWNrIHNvb24gOylcIik7XG5cdH1cbjwvc2NyaXB0PlxuXG48IS0tIENsaWVudCAtLT5cbjxzY3JpcHQ+XG5cdC8vIEV4cG9ydGVkXG5cdGV4cG9ydCBsZXQgYWRob2MgPSBbXTtcblx0ZXhwb3J0IGxldCBjaGVja2dyb3VwID0gW107XG5cblx0ZXhwb3J0IGxldCBwYWdlO1xuXHRleHBvcnQgbGV0IGxpbWl0ID0gMTA7XG5cblx0JDogbmV4dCA9IFwiLzIvMTBcIjtcblxuXHQvLyBERVZFTE9QRVJfQ09OU09MRV9MT0dcblx0JDogY29uc29sZS5sb2coXCIlYyBCUk9XU0UgYWRob2MgXCIsIFwiY29sb3I6Ymx1ZTsgZm9udC13ZWlnaHQ6Ym9sZDsgZm9udC1zaXplOjE0cHhcIiwgYWRob2MpO1xuXHQkOiBjb25zb2xlLmxvZyhcIiVjIEJST1dTRSBDaGVja2dyb3VwIFwiLCBcImNvbG9yOmdyZWVuOyBmb250LXdlaWdodDpib2xkOyBmb250LXNpemU6MTRweFwiLCBjaGVja2dyb3VwKTtcbjwvc2NyaXB0PlxuXG48IS0tIFNwZWNpYWwgLS0+XG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5Ccm93c2U8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxzdmVsdGU6b3B0aW9ucyBpbW11dGFibGUgLz5cblxuPCEtLSBDU1MgLS0+XG48c3R5bGU+XG5cdHNlY3Rpb24ge1xuXHRcdC8qIERpc3BsYXkgKi9cblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRhbGlnbi1jb250ZW50OiBjZW50ZXI7XG5cdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0LyogU2l6aW5nICovXG5cdFx0bWluLWhlaWdodDogMTAwJTtcblx0XHRtYXgtaGVpZ2h0OiBub25lO1xuXHRcdGhlaWdodDogYXV0bztcblx0XHRtaW4td2lkdGg6IDEwMHZ3O1xuXHRcdG1heC13aWR0aDogMTAwdnc7XG5cdFx0d2lkdGg6IDEwMHZ3O1xuXHRcdC8qIFJlc3QgKi9cblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2wtcHJpbWUpO1xuXHRcdG92ZXJmbG93LXk6IHNjcm9sbDtcblx0XHRvdmVyZmxvdy14OiBoaWRkZW47XG5cdFx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0fVxuXHRzZWN0aW9uID4gZGl2LCBhLCBhcnRpY2xlIHtcblx0XHQvKiBEaXNwbGF5ICovXG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuXHRcdGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXHR9XG5cdHNlY3Rpb24gPiBkaXYge1xuXHRcdC8qIFNpemluZyAqL1xuXHRcdG1pbi1oZWlnaHQ6IG5vbmU7XG5cdFx0bWF4LWhlaWdodDogbm9uZTtcblx0XHRoZWlnaHQ6IGF1dG87XG5cdFx0bWluLXdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogMTAwJTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHQvKiBSZXN0ICovXG5cdFx0b3ZlcmZsb3c6IGF1dG87XG5cdH1cblx0aGVhZGVyIHtcblx0XHQvKiBEaXNwbGF5ICovXG5cdFx0ZGlzcGxheTogZmxleDtcblx0XHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHRcdGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcblx0XHRhbGlnbi1jb250ZW50OiBmbGV4LWVuZDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdFx0LyogU2l6aW5nICovXG5cdFx0bWluLWhlaWdodDogOHZoO1xuXHRcdG1heC1oZWlnaHQ6IDh2aDtcblx0XHRoZWlnaHQ6IDh2aDtcblx0XHRtaW4td2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdC8qIFJlc3QgKi9cblx0XHRwYWRkaW5nOiAwIGNhbGModmFyKC0tcHQpICogMyk7XG5cdH1cblx0YSB7XG5cdFx0LyogU2l6aW5nICovXG5cdFx0bWluLWhlaWdodDogbm9uZTtcblx0XHRtYXgtaGVpZ2h0OiBub25lO1xuXHRcdGhlaWdodDogYXV0bztcblx0XHRtaW4td2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdC8qIFJlc3QgKi9cblx0XHRwYWRkaW5nOiBjYWxjKHZhcigtLXB0KSAqIDMuNSkgY2FsYyh2YXIoLS1wdCkgKiAzKSBjYWxjKHZhcigtLXB0KSAqIDIuNSk7XG5cdH1cblx0YXJ0aWNsZSB7XG5cdFx0LyogU2l6aW5nICovXG5cdFx0bWluLWhlaWdodDogbm9uZTtcblx0XHRtYXgtaGVpZ2h0OiBub25lO1xuXHRcdGhlaWdodDogYXV0bztcblx0XHRtaW4td2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHR9XG4gICAgYXJ0aWNsZSA+IGgyIHtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGRpc3BsYXk6IC13ZWJraXQtYm94O1xuXHRcdC13ZWJraXQtbGluZS1jbGFtcDogMztcblx0XHQtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAgICAgICAvKiBTaXppbmcgKi9cbiAgICAgICAgbWluLXdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cdH1cblx0YXJ0aWNsZSA+IHN0cm9uZyB7XG5cdFx0cGFkZGluZy10b3A6IHZhcigtLXB0KTtcblx0fVxuXHQvKiBGb250cyAqL1xuXHRkdCwgc3Ryb25nIHtcblx0XHRmb250LXNpemU6IC45cmVtO1xuXHR9XG5cdGRkLCBtYXJrIHtcblx0XHRmb250LXNpemU6IC44cmVtO1xuXHR9XG5cdG1hcms6OmJlZm9yZSB7XG5cdFx0Y29udGVudDogXCIjXCI7XG5cdH1cbjwvc3R5bGU+XG5cbjwhLS0gSFRNTCAtLT5cbjxzZWN0aW9uPlxuXHQ8aGVhZGVyPlxuXHRcdDxoMT5Cb2FyZDwvaDE+XG5cdDwvaGVhZGVyPlxuXHQ8ZGl2PlxuXHRcdHsjZWFjaCBhZGhvYyBhcyBhZGhvYyAoYWRob2MuaWQpfVxuXHRcdFx0PCEtLSA8YSBocmVmPVwicG9zdC97YWRob2MuaWR9XCI+XG5cdFx0XHRcdDxhcnRpY2xlPlxuXHRcdFx0XHRcdHsjaWYgYWRob2MudHlwZSA9PT0gXCJkZXNpZ25lclwifVxuXHRcdFx0XHRcdFx0PG1hcmsgc3R5bGU9XCJjb2xvcjogdmFyKC0tY29sLXRlcnQpXCI+e2FkaG9jLnR5cGV9PC9tYXJrPlxuXHRcdFx0XHRcdHs6ZWxzZX1cblx0XHRcdFx0XHRcdDxtYXJrIHN0eWxlPVwiY29sb3I6IHZhcigtLWNvbC1zZWNvKVwiPnthZGhvYy50eXBlfTwvbWFyaz5cblx0XHRcdFx0XHR7L2lmfVxuXHRcdFx0XHRcdDxoMj57YWRob2MudGl0bGV9PC9oMj5cblx0XHRcdFx0XHQ8ZGw+XG5cdFx0XHRcdFx0XHQ8ZHQ+e2FkaG9jLmF1dGhvcn08L2R0PlxuXHRcdFx0XHRcdFx0PGRkPnthZGhvYy5jaXR5fTwvZGQ+XG5cdFx0XHRcdFx0PC9kbD5cblx0XHRcdFx0XHQ8c3Ryb25nPnthZGhvYy5hbW91bnR9IHthZGhvYy5jdXJyZW5jeX0gLyB7YWRob2MucGF5dHlwZX08L3N0cm9uZz5cblx0XHRcdFx0PC9hcnRpY2xlPlxuXHRcdFx0PC9hPlxuXHRcdFx0PGhyPiAtLT5cblx0XHRcdDxQb3N0IHthZGhvY30vPlxuXHRcdHsvZWFjaH1cblx0XHR7I2lmIG5leHR9XG5cdFx0XHQ8YSBjbGFzcz1cIm1vcmVcIiBocmVmPXtuZXh0fT5Nb3JlLi4uPC9hPlxuXHRcdHsvaWZ9XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0EwS3lCLEdBQUk7Ozs7Ozs7OztpQ0FBSixHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQXBCcEIsR0FBSzs7a0NBQVcsR0FBSyxJQUFDLEVBQUU7OztnQ0FBN0IsTUFBSTs7Ozs7O3lCQW1CRCxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQW5CRixHQUFLOzs7Ozs7OztnQkFtQlAsR0FBSTs7Ozs7Ozs7Ozs7Ozs7OztrQ0FuQlAsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2VBcEplLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSzs7O09BR2xDLEdBQUc7OztPQUVILEdBQUcsU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7OztLQUU1QixHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUc7UUFDZixLQUFLLFNBQVMsR0FBRyxDQUFDLElBQUk7V0FDbkIsS0FBSzs7OztDQUdmLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLDZDQUE2Qzs7OztPQU9uRCxLQUFLO09BQ0wsVUFBVTtPQUVWLElBQUk7T0FDSixLQUFLLEdBQUcsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUtsQixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLDhDQUE4QyxFQUFFLEtBQUs7Ozs7SUFDckYsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSwrQ0FBK0MsRUFBRSxVQUFVOzs7O2tCQUpoRyxJQUFJLEdBQUcsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9

import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as create_slot, p as onMount, v as validate_slots, e as element, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, u as update_slot, r as transition_in, w as transition_out, x as binding_callbacks, y as toggle_class, n as noop, z as bind, A as create_component, B as claim_component, C as mount_component, D as add_flush_callback, E as destroy_component, F as empty, G as group_outros, H as check_outros, I as not_equal, J as validate_each_argument, K as validate_each_keys, L as globals, a as space, t as text, M as svg_element, c as claim_space, h as claim_text, N as xlink_attr, m as append_dev, O as set_data_dev, q as query_selector_all, P as update_keyed_each, Q as add_render_callback, R as create_in_transition, T as outro_and_destroy_block } from './client.0a073a43.js';
import { f as fly } from './index.ff7bd4a9.js';

/* src/components/image/Observer.svelte generated by Svelte v3.24.1 */
const file = "src/components/image/Observer.svelte";
const get_default_slot_changes = dirty => ({ intersecting: dirty & /*intersecting*/ 1 });
const get_default_slot_context = ctx => ({ intersecting: /*intersecting*/ ctx[0] });

function create_fragment(ctx) {
	let figure;
	let current;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context);

	const block = {
		c: function create() {
			figure = element("figure");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			if (default_slot) default_slot.l(figure_nodes);
			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(figure, "class", "svelte-1hoxwni");
			add_location(figure, file, 52, 0, 1281);
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);

			if (default_slot) {
				default_slot.m(figure, null);
			}

			/*figure_binding*/ ctx[9](figure);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, intersecting*/ 129) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
			if (default_slot) default_slot.d(detaching);
			/*figure_binding*/ ctx[9](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { intersecting } = $$props;
	let { once = false } = $$props;
	let { top = 0 } = $$props;
	let { bottom = 0 } = $$props;
	let { left = 0 } = $$props;
	let { right = 0 } = $$props;

	// Lets
	let container;

	// Intersection
	onMount(() => {
		if (typeof IntersectionObserver !== "undefined") {
			const rootMargin = `${bottom}px ${left}px ${top}px ${right}px`;

			const observer = new IntersectionObserver(entries => {
					$$invalidate(0, intersecting = entries[0].isIntersecting);

					if (intersecting && once) {
						observer.unobserve(container);
					}
				},
			{ rootMargin });

			observer.observe(container);
			return () => observer.unobserve(container);
		}
	});

	const writable_props = ["intersecting", "once", "top", "bottom", "left", "right"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Observer> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Observer", $$slots, ['default']);

	function figure_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$$set = $$props => {
		if ("intersecting" in $$props) $$invalidate(0, intersecting = $$props.intersecting);
		if ("once" in $$props) $$invalidate(2, once = $$props.once);
		if ("top" in $$props) $$invalidate(3, top = $$props.top);
		if ("bottom" in $$props) $$invalidate(4, bottom = $$props.bottom);
		if ("left" in $$props) $$invalidate(5, left = $$props.left);
		if ("right" in $$props) $$invalidate(6, right = $$props.right);
		if ("$$scope" in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		intersecting,
		once,
		top,
		bottom,
		left,
		right,
		container
	});

	$$self.$inject_state = $$props => {
		if ("intersecting" in $$props) $$invalidate(0, intersecting = $$props.intersecting);
		if ("once" in $$props) $$invalidate(2, once = $$props.once);
		if ("top" in $$props) $$invalidate(3, top = $$props.top);
		if ("bottom" in $$props) $$invalidate(4, bottom = $$props.bottom);
		if ("left" in $$props) $$invalidate(5, left = $$props.left);
		if ("right" in $$props) $$invalidate(6, right = $$props.right);
		if ("container" in $$props) $$invalidate(1, container = $$props.container);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		intersecting,
		container,
		once,
		top,
		bottom,
		left,
		right,
		$$scope,
		$$slots,
		figure_binding
	];
}

class Observer extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			intersecting: 0,
			once: 2,
			top: 3,
			bottom: 4,
			left: 5,
			right: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Observer",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*intersecting*/ ctx[0] === undefined && !("intersecting" in props)) {
			console.warn("<Observer> was created without expected prop 'intersecting'");
		}
	}

	get intersecting() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set intersecting(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get once() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set once(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get top() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set top(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get bottom() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bottom(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get left() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set left(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get right() {
		throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set right(value) {
		throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/image/Image.svelte generated by Svelte v3.24.1 */
const file$1 = "src/components/image/Image.svelte";

function create_fragment$1(ctx) {
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", {
				src: true,
				alt: true,
				height: true,
				width: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*src*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*alt*/ ctx[1]);
			attr_dev(img, "height", "144");
			attr_dev(img, "width", "144");
			attr_dev(img, "class", "svelte-1ke4t62");
			toggle_class(img, "loaded", /*loaded*/ ctx[2]);
			add_location(img, file$1, 38, 0, 707);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			/*img_binding*/ ctx[4](img);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*src*/ 1 && img.src !== (img_src_value = /*src*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*alt*/ 2) {
				attr_dev(img, "alt", /*alt*/ ctx[1]);
			}

			if (dirty & /*loaded*/ 4) {
				toggle_class(img, "loaded", /*loaded*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			/*img_binding*/ ctx[4](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { src } = $$props;
	let { alt } = $$props;

	// Lets
	let loaded = false;

	let image;

	onMount(() => {
		$$invalidate(
			3,
			image.onload = () => {
				$$invalidate(2, loaded = true);
			},
			image
		);
	});

	const writable_props = ["src", "alt"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Image> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Image", $$slots, []);

	function img_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			image = $$value;
			$$invalidate(3, image);
		});
	}

	$$self.$$set = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
	};

	$$self.$capture_state = () => ({ onMount, src, alt, loaded, image });

	$$self.$inject_state = $$props => {
		if ("src" in $$props) $$invalidate(0, src = $$props.src);
		if ("alt" in $$props) $$invalidate(1, alt = $$props.alt);
		if ("loaded" in $$props) $$invalidate(2, loaded = $$props.loaded);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [src, alt, loaded, image, img_binding];
}

class Image extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { src: 0, alt: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Image",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*src*/ ctx[0] === undefined && !("src" in props)) {
			console.warn("<Image> was created without expected prop 'src'");
		}

		if (/*alt*/ ctx[1] === undefined && !("alt" in props)) {
			console.warn("<Image> was created without expected prop 'alt'");
		}
	}

	get src() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Image>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Image>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/image/Figure.svelte generated by Svelte v3.24.1 */

// (25:4) {#if intersecting}
function create_if_block(ctx) {
	let image;
	let current;

	image = new Image({
			props: { src: /*src*/ ctx[1], alt: /*alt*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(image.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(image.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(image, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const image_changes = {};
			if (dirty & /*src*/ 2) image_changes.src = /*src*/ ctx[1];
			if (dirty & /*alt*/ 4) image_changes.alt = /*alt*/ ctx[2];
			image.$set(image_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(image, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(25:4) {#if intersecting}",
		ctx
	});

	return block;
}

// (24:0) <Observer once={true} bind:intersecting>
function create_default_slot(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*intersecting*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*intersecting*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*intersecting*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(24:0) <Observer once={true} bind:intersecting>",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let observer;
	let updating_intersecting;
	let current;

	function observer_intersecting_binding(value) {
		/*observer_intersecting_binding*/ ctx[4].call(null, value);
	}

	let observer_props = {
		once: true,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*intersecting*/ ctx[0] !== void 0) {
		observer_props.intersecting = /*intersecting*/ ctx[0];
	}

	observer = new Observer({ props: observer_props, $$inline: true });
	binding_callbacks.push(() => bind(observer, "intersecting", observer_intersecting_binding));

	const block = {
		c: function create() {
			create_component(observer.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(observer.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(observer, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const observer_changes = {};

			if (dirty & /*$$scope, src, alt, intersecting*/ 71) {
				observer_changes.$$scope = { dirty, ctx };
			}

			if (!updating_intersecting && dirty & /*intersecting*/ 1) {
				updating_intersecting = true;
				observer_changes.intersecting = /*intersecting*/ ctx[0];
				add_flush_callback(() => updating_intersecting = false);
			}

			observer.$set(observer_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(observer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(observer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(observer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { card } = $$props;
	let { intersecting = false } = $$props;
	let { src = card.img } = $$props;
	let { alt = card.title } = $$props;

	// Let
	let nativeLoading = false;

	// Native LL
	onMount(() => {
		if ("loading" in HTMLImageElement.prototype) {
			nativeLoading = true;
		}
	});

	const writable_props = ["card", "intersecting", "src", "alt"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Figure> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Figure", $$slots, []);

	function observer_intersecting_binding(value) {
		intersecting = value;
		$$invalidate(0, intersecting);
	}

	$$self.$$set = $$props => {
		if ("card" in $$props) $$invalidate(3, card = $$props.card);
		if ("intersecting" in $$props) $$invalidate(0, intersecting = $$props.intersecting);
		if ("src" in $$props) $$invalidate(1, src = $$props.src);
		if ("alt" in $$props) $$invalidate(2, alt = $$props.alt);
	};

	$$self.$capture_state = () => ({
		onMount,
		Observer,
		Image,
		card,
		intersecting,
		src,
		alt,
		nativeLoading
	});

	$$self.$inject_state = $$props => {
		if ("card" in $$props) $$invalidate(3, card = $$props.card);
		if ("intersecting" in $$props) $$invalidate(0, intersecting = $$props.intersecting);
		if ("src" in $$props) $$invalidate(1, src = $$props.src);
		if ("alt" in $$props) $$invalidate(2, alt = $$props.alt);
		if ("nativeLoading" in $$props) nativeLoading = $$props.nativeLoading;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [intersecting, src, alt, card, observer_intersecting_binding];
}

class Figure extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { card: 3, intersecting: 0, src: 1, alt: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Figure",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*card*/ ctx[3] === undefined && !("card" in props)) {
			console.warn("<Figure> was created without expected prop 'card'");
		}
	}

	get card() {
		throw new Error("<Figure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set card(value) {
		throw new Error("<Figure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get intersecting() {
		throw new Error("<Figure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set intersecting(value) {
		throw new Error("<Figure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<Figure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<Figure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<Figure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<Figure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/saved.svelte generated by Svelte v3.24.1 */

const { Object: Object_1 } = globals;
const file$2 = "src/routes/saved.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (149:2) {#each cards as card (card.id)}
function create_each_block(key_1, ctx) {
	let a;
	let figure;
	let t0;
	let dl;
	let dt;
	let t1_value = /*card*/ ctx[4].title + "";
	let t1;
	let dd;
	let t2_value = /*card*/ ctx[4].city + "";
	let t2;
	let t3;
	let svg;
	let use;
	let t4;
	let a_href_value;
	let current;

	figure = new Figure({
			props: {
				card: /*card*/ ctx[4],
				intersect: /*intersect*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			a = element("a");
			create_component(figure.$$.fragment);
			t0 = space();
			dl = element("dl");
			dt = element("dt");
			t1 = text(t1_value);
			dd = element("dd");
			t2 = text(t2_value);
			t3 = space();
			svg = svg_element("svg");
			use = svg_element("use");
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, rel: true, class: true });
			var a_nodes = children(a);
			claim_component(figure.$$.fragment, a_nodes);
			t0 = claim_space(a_nodes);
			dl = claim_element(a_nodes, "DL", { class: true });
			var dl_nodes = children(dl);
			dt = claim_element(dl_nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t1 = claim_text(dt_nodes, t1_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(dl_nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			t2 = claim_text(dd_nodes, t2_value);
			dd_nodes.forEach(detach_dev);
			dl_nodes.forEach(detach_dev);
			t3 = claim_space(a_nodes);
			svg = claim_element(a_nodes, "svg", { class: true }, 1);
			var svg_nodes = children(svg);
			use = claim_element(svg_nodes, "use", { "xlink:href": true }, 1);
			children(use).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			t4 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "svelte-b24raj");
			add_location(dt, file$2, 152, 5, 3246);
			attr_dev(dd, "class", "svelte-b24raj");
			add_location(dd, file$2, 153, 5, 3273);
			attr_dev(dl, "class", "svelte-b24raj");
			add_location(dl, file$2, 151, 4, 3236);
			xlink_attr(use, "xlink:href", "/sprite.svg#right");
			add_location(use, file$2, 155, 9, 3313);
			attr_dev(svg, "class", "svelte-b24raj");
			add_location(svg, file$2, 155, 4, 3308);
			attr_dev(a, "href", a_href_value = "locations/" + /*card*/ ctx[4].id);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "class", "svelte-b24raj");
			add_location(a, file$2, 149, 3, 3155);
			this.first = a;
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			mount_component(figure, a, null);
			append_dev(a, t0);
			append_dev(a, dl);
			append_dev(dl, dt);
			append_dev(dt, t1);
			append_dev(dl, dd);
			append_dev(dd, t2);
			append_dev(a, t3);
			append_dev(a, svg);
			append_dev(svg, use);
			append_dev(a, t4);
			current = true;
		},
		p: function update(ctx, dirty) {
			const figure_changes = {};
			if (dirty & /*cards*/ 2) figure_changes.card = /*card*/ ctx[4];
			if (dirty & /*intersect*/ 1) figure_changes.intersect = /*intersect*/ ctx[0];
			figure.$set(figure_changes);
			if ((!current || dirty & /*cards*/ 2) && t1_value !== (t1_value = /*card*/ ctx[4].title + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*cards*/ 2) && t2_value !== (t2_value = /*card*/ ctx[4].city + "")) set_data_dev(t2, t2_value);

			if (!current || dirty & /*cards*/ 2 && a_href_value !== (a_href_value = "locations/" + /*card*/ ctx[4].id)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(figure.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(figure.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(figure);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(149:2) {#each cards as card (card.id)}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let t;
	let section;
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let section_intro;
	let current;
	let each_value = /*cards*/ ctx[1];
	validate_each_argument(each_value);
	const get_key = ctx => /*card*/ ctx[4].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			t = space();
			section = element("section");
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1295geg\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Favourites";
			attr_dev(div, "class", "svelte-b24raj");
			add_location(div, file$2, 147, 1, 3112);
			attr_dev(section, "class", "svelte-b24raj");
			add_location(section, file$2, 146, 0, 3055);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cards, intersect*/ 3) {
				const each_value = /*cards*/ ctx[1];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!section_intro) {
				add_render_callback(() => {
					section_intro = create_in_transition(section, fly, { duration: 320, y: 40, opacity: 1 });
					section_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// URL
	const url = "https://6016e904f534300017a4509d.mockapi.io/board";

	// Fetch
	const res = await this.fetch(url);

	// Validate
	if (res.status === 200) {
		const list = await res.json();
		return { list };
	}

	// Error
	this.error(500, "Problems with server. Be right back soon ;)");
}

function instance$3($$self, $$props, $$invalidate) {
	let { list } = $$props;
	let { intersect = true } = $$props;

	// Lets
	let getLocal;

	let cards = [];
	const writable_props = ["list", "intersect"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Saved> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Saved", $$slots, []);

	$$self.$$set = $$props => {
		if ("list" in $$props) $$invalidate(2, list = $$props.list);
		if ("intersect" in $$props) $$invalidate(0, intersect = $$props.intersect);
	};

	$$self.$capture_state = () => ({
		preload,
		fly,
		Figure,
		list,
		intersect,
		getLocal,
		cards
	});

	$$self.$inject_state = $$props => {
		if ("list" in $$props) $$invalidate(2, list = $$props.list);
		if ("intersect" in $$props) $$invalidate(0, intersect = $$props.intersect);
		if ("getLocal" in $$props) $$invalidate(3, getLocal = $$props.getLocal);
		if ("cards" in $$props) $$invalidate(1, cards = $$props.cards);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*list, getLocal*/ 12) {
			// Filtering
			 $$invalidate(1, cards = list.filter(uid => {
				if (typeof window !== "undefined") {
					$$invalidate(3, getLocal = Object.keys(localStorage));
					return getLocal.includes(uid.id);
				}
			}));
		}
	};

	return [intersect, cards, list];
}

class Saved extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, not_equal, { list: 2, intersect: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Saved",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*list*/ ctx[2] === undefined && !("list" in props)) {
			console.warn("<Saved> was created without expected prop 'list'");
		}
	}

	get list() {
		throw new Error("<Saved>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<Saved>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get intersect() {
		throw new Error("<Saved>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set intersect(value) {
		throw new Error("<Saved>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Saved;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

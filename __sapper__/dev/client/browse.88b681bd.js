import { S as SvelteComponentDev, i as init, d as dispatch_dev, o as not_equal, p as validate_each_argument, F as validate_each_keys, v as validate_slots, G as globals, e as element, a as space, t as text, f as claim_element, g as children, c as claim_space, h as claim_text, b as detach_dev, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, r as set_data_dev, q as query_selector_all, H as update_keyed_each, n as noop, I as destroy_block, E as set_style } from './client.d2789086.js';

/* src/routes/browse.svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;
const file = "src/routes/browse.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (172:6) {:else}
function create_else_block(ctx) {
	let em;
	let t_value = /*list*/ ctx[0].type + "";
	let t;

	const block = {
		c: function create() {
			em = element("em");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			em = claim_element(nodes, "EM", { style: true, class: true });
			var em_nodes = children(em);
			t = claim_text(em_nodes, t_value);
			em_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(em, "color", "var(--col-seco)");
			attr_dev(em, "class", "svelte-k0dknw");
			add_location(em, file, 172, 7, 3647);
		},
		m: function mount(target, anchor) {
			insert_dev(target, em, anchor);
			append_dev(em, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*list*/ 1 && t_value !== (t_value = /*list*/ ctx[0].type + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(em);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(172:6) {:else}",
		ctx
	});

	return block;
}

// (170:6) {#if list.type === "designer"}
function create_if_block(ctx) {
	let em;
	let t_value = /*list*/ ctx[0].type + "";
	let t;

	const block = {
		c: function create() {
			em = element("em");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			em = claim_element(nodes, "EM", { style: true, class: true });
			var em_nodes = children(em);
			t = claim_text(em_nodes, t_value);
			em_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(em, "color", "var(--col-tert)");
			attr_dev(em, "class", "svelte-k0dknw");
			add_location(em, file, 170, 7, 3574);
		},
		m: function mount(target, anchor) {
			insert_dev(target, em, anchor);
			append_dev(em, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*list*/ 1 && t_value !== (t_value = /*list*/ ctx[0].type + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(em);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(170:6) {#if list.type === \\\"designer\\\"}",
		ctx
	});

	return block;
}

// (167:3) {#each list as list (list.id)}
function create_each_block(key_1, ctx) {
	let a;
	let article;
	let t0;
	let h2;
	let t1_value = /*list*/ ctx[0].title + "";
	let t1;
	let t2;
	let dl;
	let dt;
	let t3_value = /*list*/ ctx[0].author + "";
	let t3;
	let dd;
	let t4_value = /*list*/ ctx[0].city + "";
	let t4;
	let t5;
	let p;
	let t6_value = /*list*/ ctx[0].brief + "";
	let t6;
	let a_href_value;
	let t7;
	let hr;

	function select_block_type(ctx, dirty) {
		if (/*list*/ ctx[0].type === "designer") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			a = element("a");
			article = element("article");
			if_block.c();
			t0 = space();
			h2 = element("h2");
			t1 = text(t1_value);
			t2 = space();
			dl = element("dl");
			dt = element("dt");
			t3 = text(t3_value);
			dd = element("dd");
			t4 = text(t4_value);
			t5 = space();
			p = element("p");
			t6 = text(t6_value);
			t7 = space();
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			article = claim_element(a_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			if_block.l(article_nodes);
			t0 = claim_space(article_nodes);
			h2 = claim_element(article_nodes, "H2", {});
			var h2_nodes = children(h2);
			t1 = claim_text(h2_nodes, t1_value);
			h2_nodes.forEach(detach_dev);
			t2 = claim_space(article_nodes);
			dl = claim_element(article_nodes, "DL", {});
			var dl_nodes = children(dl);
			dt = claim_element(dl_nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t3 = claim_text(dt_nodes, t3_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(dl_nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			t4 = claim_text(dd_nodes, t4_value);
			dd_nodes.forEach(detach_dev);
			dl_nodes.forEach(detach_dev);
			t5 = claim_space(article_nodes);
			p = claim_element(article_nodes, "P", { class: true });
			var p_nodes = children(p);
			t6 = claim_text(p_nodes, t6_value);
			p_nodes.forEach(detach_dev);
			article_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			hr = claim_element(nodes, "HR", {});
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 174, 6, 3717);
			attr_dev(dt, "class", "svelte-k0dknw");
			add_location(dt, file, 176, 7, 3757);
			attr_dev(dd, "class", "svelte-k0dknw");
			add_location(dd, file, 177, 7, 3787);
			add_location(dl, file, 175, 6, 3745);
			attr_dev(p, "class", "svelte-k0dknw");
			add_location(p, file, 179, 6, 3826);
			attr_dev(article, "class", "svelte-k0dknw");
			add_location(article, file, 168, 5, 3520);
			attr_dev(a, "href", a_href_value = "locations/" + /*list*/ ctx[0].id);
			attr_dev(a, "class", "svelte-k0dknw");
			add_location(a, file, 167, 4, 3484);
			add_location(hr, file, 182, 4, 3875);
			this.first = a;
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, article);
			if_block.m(article, null);
			append_dev(article, t0);
			append_dev(article, h2);
			append_dev(h2, t1);
			append_dev(article, t2);
			append_dev(article, dl);
			append_dev(dl, dt);
			append_dev(dt, t3);
			append_dev(dl, dd);
			append_dev(dd, t4);
			append_dev(article, t5);
			append_dev(article, p);
			append_dev(p, t6);
			insert_dev(target, t7, anchor);
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(article, t0);
				}
			}

			if (dirty & /*list*/ 1 && t1_value !== (t1_value = /*list*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
			if (dirty & /*list*/ 1 && t3_value !== (t3_value = /*list*/ ctx[0].author + "")) set_data_dev(t3, t3_value);
			if (dirty & /*list*/ 1 && t4_value !== (t4_value = /*list*/ ctx[0].city + "")) set_data_dev(t4, t4_value);
			if (dirty & /*list*/ 1 && t6_value !== (t6_value = /*list*/ ctx[0].brief + "")) set_data_dev(t6, t6_value);

			if (dirty & /*list*/ 1 && a_href_value !== (a_href_value = "locations/" + /*list*/ ctx[0].id)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if_block.d();
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(167:3) {#each list as list (list.id)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let section;
	let header;
	let h1;
	let t1;
	let t2;
	let div1;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_value = /*list*/ ctx[0];
	validate_each_argument(each_value);
	const get_key = ctx => /*list*/ ctx[0].id;
	validate_each_keys(ctx, each_value, get_each_context, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			header = element("header");
			h1 = element("h1");
			t1 = text("Board");
			t2 = space();
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-ygz96u\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			h1 = claim_element(header_nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Board");
			h1_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Browse";
			add_location(h1, file, 162, 2, 3405);
			attr_dev(header, "class", "svelte-k0dknw");
			add_location(header, file, 161, 1, 3394);
			attr_dev(div0, "class", "svelte-k0dknw");
			add_location(div0, file, 165, 2, 3440);
			attr_dev(div1, "class", "svelte-k0dknw");
			add_location(div1, file, 164, 1, 3432);
			attr_dev(section, "class", "svelte-k0dknw");
			add_location(section, file, 160, 0, 3383);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, header);
			append_dev(header, h1);
			append_dev(h1, t1);
			append_dev(section, t2);
			append_dev(section, div1);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*list*/ 1) {
				const each_value = /*list*/ ctx[0];
				validate_each_argument(each_value);
				validate_each_keys(ctx, each_value, get_each_context, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block, null, get_each_context);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// URL
	const url = "https://6016e904f534300017a4509d.mockapi.io/board";

	// Fetch
	const res = await this.fetch(url);

	// Validate
	if (res.status === 200) {
		const list = await res.json();
		return { list };
	}

	// Error
	this.error(500, "Problems with server. Be right back soon ;)");
}

function instance($$self, $$props, $$invalidate) {
	let { list = [] } = $$props;
	let { checkgroup = [] } = $$props;

	// DEVELOPER_FUNCTIONS
	let takeactionval;

	const takeaction = async () => {
		if (!sessionStorage.getItem("Session_state", takeactionval)) {
			return sessionStorage.setItem("Session_state", takeactionval);
		} else {
			return sessionStorage.removeItem("Session_state", takeactionval);
		}
	};

	const writable_props = ["list", "checkgroup"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Browse> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Browse", $$slots, []);

	$$self.$$set = $$props => {
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
		if ("checkgroup" in $$props) $$invalidate(1, checkgroup = $$props.checkgroup);
	};

	$$self.$capture_state = () => ({
		preload,
		list,
		checkgroup,
		takeactionval,
		takeaction
	});

	$$self.$inject_state = $$props => {
		if ("list" in $$props) $$invalidate(0, list = $$props.list);
		if ("checkgroup" in $$props) $$invalidate(1, checkgroup = $$props.checkgroup);
		if ("takeactionval" in $$props) $$invalidate(2, takeactionval = $$props.takeactionval);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*list*/ 1) {
			// DEVELOPER_CONSOLE_LOG
			 console.log("%c BROWSE List ", "color:blue; font-weight:bold; font-size:14px", list);
		}

		if ($$self.$$.dirty & /*checkgroup*/ 2) {
			 console.log("%c BROWSE Checkgroup ", "color:green; font-weight:bold; font-size:14px", checkgroup);
		}

		if ($$self.$$.dirty & /*takeactionval*/ 4) {
			 (async () => {
				if (typeof window !== "undefined") {
					if (sessionStorage.getItem("Session_state", takeactionval)) {
						return $$invalidate(2, takeactionval = "Session_is_SET");
					} else {
						return $$invalidate(2, takeactionval = "Session_is_EMPTY");
					}
				}
			})();
		}
	};

	return [list, checkgroup];
}

class Browse extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, not_equal, { list: 0, checkgroup: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Browse",
			options,
			id: create_fragment.name
		});
	}

	get list() {
		throw new Error("<Browse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<Browse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checkgroup() {
		throw new Error("<Browse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checkgroup(value) {
		throw new Error("<Browse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Browse;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLjg4YjY4MWJkLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2Jyb3dzZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPCEtLSBTZXJ2ZXIgLS0+XG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQocGFnZSwgc2Vzc2lvbikge1xuXHRcdC8vIFVSTFxuXHRcdGNvbnN0IHVybCA9IFwiaHR0cHM6Ly82MDE2ZTkwNGY1MzQzMDAwMTdhNDUwOWQubW9ja2FwaS5pby9ib2FyZFwiO1xuXHRcdC8vIEZldGNoXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaCh1cmwpO1xuXHRcdC8vIFZhbGlkYXRlXG5cdFx0aWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuXHRcdFx0Y29uc3QgbGlzdCA9IGF3YWl0IHJlcy5qc29uKCk7XG5cdFx0XHRyZXR1cm4geyBsaXN0IH07XG5cdFx0fVxuXHRcdC8vIEVycm9yXG5cdFx0dGhpcy5lcnJvcig1MDAsIFwiUHJvYmxlbXMgd2l0aCBzZXJ2ZXIuIEJlIHJpZ2h0IGJhY2sgc29vbiA7KVwiKTtcblx0fVxuPC9zY3JpcHQ+XG5cbjwhLS0gQ2xpZW50IC0tPlxuPHNjcmlwdD5cblx0Ly8gaW1wb3J0IEZpbHRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9GaWx0ZXIuc3ZlbHRlXCI7XG5cdC8vIGltcG9ydCBGaWd1cmUgZnJvbSBcIi4uL2NvbXBvbmVudHMvaW1hZ2UvRmlndXJlLnN2ZWx0ZVwiO1xuXG5cdC8vIEV4cG9ydGVkXG5cdGV4cG9ydCBsZXQgbGlzdCA9IFtdO1xuXHRleHBvcnQgbGV0IGNoZWNrZ3JvdXAgPSBbXTtcblxuXHQvLyBERVZFTE9QRVJfQ09OU09MRV9MT0dcblx0JDogY29uc29sZS5sb2coXCIlYyBCUk9XU0UgTGlzdCBcIiwgXCJjb2xvcjpibHVlOyBmb250LXdlaWdodDpib2xkOyBmb250LXNpemU6MTRweFwiLCBsaXN0KTtcblx0JDogY29uc29sZS5sb2coXCIlYyBCUk9XU0UgQ2hlY2tncm91cCBcIiwgXCJjb2xvcjpncmVlbjsgZm9udC13ZWlnaHQ6Ym9sZDsgZm9udC1zaXplOjE0cHhcIiwgY2hlY2tncm91cCk7XG5cdC8vIERFVkVMT1BFUl9GVU5DVElPTlNcblx0bGV0IHRha2VhY3Rpb252YWw7XG5cdCQ6IChhc3luYygpID0+IHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0aWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJTZXNzaW9uX3N0YXRlXCIsIHRha2VhY3Rpb252YWwpKSB7XG5cdFx0XHRcdHJldHVybiB0YWtlYWN0aW9udmFsID0gXCJTZXNzaW9uX2lzX1NFVFwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRha2VhY3Rpb252YWwgPSBcIlNlc3Npb25faXNfRU1QVFlcIjtcblx0XHRcdH1cblx0XHR9XG5cdH0pKCk7XG5cdGNvbnN0IHRha2VhY3Rpb24gPSBhc3luYyAoKSA9PiB7XG5cdFx0aWYgKCFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiU2Vzc2lvbl9zdGF0ZVwiLCB0YWtlYWN0aW9udmFsKSkge1xuXHRcdFx0cmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJTZXNzaW9uX3N0YXRlXCIsIHRha2VhY3Rpb252YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShcIlNlc3Npb25fc3RhdGVcIiwgdGFrZWFjdGlvbnZhbCk7XG5cdFx0fVxuXHR9O1xuPC9zY3JpcHQ+XG5cbjwhLS0gU3BlY2lhbCAtLT5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkJyb3dzZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuPHN2ZWx0ZTpvcHRpb25zIGltbXV0YWJsZSAvPlxuXG48IS0tIENTUyAtLT5cbjxzdHlsZT5cblx0c2VjdGlvbiB7XG5cdFx0LyogRGlzcGxheSAqL1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHQvKiBTaXppbmcgKi9cblx0XHRtaW4taGVpZ2h0OiAxMDAlO1xuXHRcdG1heC1oZWlnaHQ6IG5vbmU7XG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG1pbi13aWR0aDogMTAwdnc7XG5cdFx0bWF4LXdpZHRoOiAxMDB2dztcblx0XHR3aWR0aDogMTAwdnc7XG5cdFx0LyogUmVzdCAqL1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbC1wcmltZSk7XG5cdFx0b3ZlcmZsb3cteTogc2Nyb2xsO1xuXHRcdG92ZXJmbG93LXg6IGhpZGRlbjtcblx0XHRvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluO1xuXHR9XG5cdHNlY3Rpb24gPiBkaXYsIHNlY3Rpb24gPiBkaXYgPiBkaXYsIGEsIGFydGljbGUge1xuXHRcdC8qIERpc3BsYXkgKi9cblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0YWxpZ24tY29udGVudDogZmxleC1zdGFydDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG5cdH1cblx0c2VjdGlvbiA+IGRpdiB7XG5cdFx0LyogU2l6aW5nICovXG5cdFx0bWluLWhlaWdodDogbm9uZTtcblx0XHRtYXgtaGVpZ2h0OiBub25lO1xuXHRcdGhlaWdodDogYXV0bztcblx0XHRtaW4td2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdC8qIFJlc3QgKi9cblx0XHRvdmVyZmxvdzogYXV0bztcblx0fVxuXHRoZWFkZXIge1xuXHRcdC8qIERpc3BsYXkgKi9cblx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuXHRcdGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kO1xuXHRcdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcblx0XHQvKiBTaXppbmcgKi9cblx0XHRtaW4taGVpZ2h0OiA4dmg7XG5cdFx0bWF4LWhlaWdodDogOHZoO1xuXHRcdGhlaWdodDogOHZoO1xuXHRcdG1pbi13aWR0aDogMTAwJTtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0LyogUmVzdCAqL1xuXHRcdHBhZGRpbmc6IDAgY2FsYyh2YXIoLS1wdCkgKiAzKTtcblx0fVxuXHRhIHtcblx0XHQvKiBTaXppbmcgKi9cblx0XHRtaW4taGVpZ2h0OiBub25lO1xuXHRcdG1heC1oZWlnaHQ6IG5vbmU7XG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG1pbi13aWR0aDogMTAwJTtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0LyogUmVzdCAqL1xuXHRcdHBhZGRpbmc6IGNhbGModmFyKC0tcHQpICogMy41KSBjYWxjKHZhcigtLXB0KSAqIDMpIGNhbGModmFyKC0tcHQpICogMi41KTtcblx0fVxuXHRhcnRpY2xlIHtcblx0XHQvKiBTaXppbmcgKi9cblx0XHRtaW4taGVpZ2h0OiBub25lO1xuXHRcdG1heC1oZWlnaHQ6IG5vbmU7XG5cdFx0aGVpZ2h0OiBhdXRvO1xuXHRcdG1pbi13aWR0aDogMTAwJTtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdH1cbiAgICBhcnRpY2xlID4gaDMsIGFydGljbGUgPiBwIHtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdGRpc3BsYXk6IC13ZWJraXQtYm94O1xuXHRcdC13ZWJraXQtbGluZS1jbGFtcDogMjtcblx0XHQtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAgICAgICAvKiBTaXppbmcgKi9cbiAgICAgICAgbWluLXdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG5cdH1cblx0YXJ0aWNsZSA+IHAge1xuXHRcdHBhZGRpbmctdG9wOiB2YXIoLS1wdCk7XG5cdH1cblx0LyogRm9udHMgKi9cblx0ZHQsIHAge1xuXHRcdGZvbnQtc2l6ZTogLjlyZW07XG5cdH1cblx0ZGQsIGVtIHtcblx0XHRmb250LXNpemU6IC44cmVtO1xuXHR9XG5cdGVtOjpiZWZvcmUge1xuXHRcdGNvbnRlbnQ6IFwiI1wiO1xuXHR9XG48L3N0eWxlPlxuXG48IS0tIEhUTUwgLS0+XG48c2VjdGlvbj5cblx0PGhlYWRlcj5cblx0XHQ8aDE+Qm9hcmQ8L2gxPlxuXHQ8L2hlYWRlcj5cblx0PGRpdj5cblx0XHQ8ZGl2PlxuXHRcdFx0eyNlYWNoIGxpc3QgYXMgbGlzdCAobGlzdC5pZCl9XG5cdFx0XHRcdDxhIGhyZWY9XCJsb2NhdGlvbnMve2xpc3QuaWR9XCI+XG5cdFx0XHRcdFx0PGFydGljbGU+XG5cdFx0XHRcdFx0XHR7I2lmIGxpc3QudHlwZSA9PT0gXCJkZXNpZ25lclwifVxuXHRcdFx0XHRcdFx0XHQ8ZW0gc3R5bGU9XCJjb2xvcjogdmFyKC0tY29sLXRlcnQpXCI+e2xpc3QudHlwZX08L2VtPlxuXHRcdFx0XHRcdFx0ezplbHNlfVxuXHRcdFx0XHRcdFx0XHQ8ZW0gc3R5bGU9XCJjb2xvcjogdmFyKC0tY29sLXNlY28pXCI+e2xpc3QudHlwZX08L2VtPlxuXHRcdFx0XHRcdFx0ey9pZn1cblx0XHRcdFx0XHRcdDxoMj57bGlzdC50aXRsZX08L2gyPlxuXHRcdFx0XHRcdFx0PGRsPlxuXHRcdFx0XHRcdFx0XHQ8ZHQ+e2xpc3QuYXV0aG9yfTwvZHQ+XG5cdFx0XHRcdFx0XHRcdDxkZD57bGlzdC5jaXR5fTwvZGQ+XG5cdFx0XHRcdFx0XHQ8L2RsPlxuXHRcdFx0XHRcdFx0PHA+e2xpc3QuYnJpZWZ9PC9wPlxuXHRcdFx0XHRcdDwvYXJ0aWNsZT5cblx0XHRcdFx0PC9hPlxuXHRcdFx0XHQ8aHI+XG5cdFx0XHR7L2VhY2h9XG5cdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC9zZWN0aW9uPlxuPCEtLSA8RmlsdGVyIGJpbmQ6Y2hlY2tncm91cCBiaW5kOnRyYW5zbGF0ZSBiaW5kOmxpc3RzIGJpbmQ6bGlzdC8+IC0tPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBNEsyQyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkRBQVQsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFGVCxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkRBQVQsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFJekMsR0FBSSxJQUFDLEtBQUs7Ozs7O3lCQUVULEdBQUksSUFBQyxNQUFNOzs7eUJBQ1gsR0FBSSxJQUFDLElBQUk7Ozs7eUJBRVgsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7ZUFWVCxHQUFJLElBQUMsSUFBSSxLQUFLLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4REFGWCxHQUFJLElBQUMsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0RBT3BCLEdBQUksSUFBQyxLQUFLOytEQUVULEdBQUksSUFBQyxNQUFNOytEQUNYLEdBQUksSUFBQyxJQUFJOytEQUVYLEdBQUksSUFBQyxLQUFLOztzRkFaSSxHQUFJLElBQUMsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFEckIsR0FBSTs7aUNBQVUsR0FBSSxJQUFDLEVBQUU7OztnQ0FBMUIsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0FBQyxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQXBLUyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU87O09BRXBDLEdBQUcsR0FBRyxtREFBbUQ7OztPQUV6RCxHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7S0FFNUIsR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHO1FBQ2YsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJO1dBQ2xCLElBQUk7Ozs7Q0FHZCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSw2Q0FBNkM7Ozs7T0FVbkQsSUFBSTtPQUNKLFVBQVU7OztLQU1qQixhQUFhOztPQVVYLFVBQVU7T0FDVixjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxhQUFhO1VBQ2xELGNBQWMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLGFBQWE7O1VBRXJELGNBQWMsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWpCOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSw4Q0FBOEMsRUFBRSxJQUFJOzs7O0lBQ25GLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsK0NBQStDLEVBQUUsVUFBVTs7Ozs7ZUFJdkYsTUFBTSxLQUFLLFdBQVc7U0FDNUIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsYUFBYTs2QkFDakQsYUFBYSxHQUFHLGdCQUFnQjs7NkJBRWhDLGFBQWEsR0FBRyxrQkFBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=

import { w as writable, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, t as text, h as claim_text, l as insert_dev, b as detach_dev, e as element, a as space, f as claim_element, g as children, c as claim_space, j as attr_dev, k as add_location, m as append_dev, o as set_data_dev, n as noop, p as not_equal, r as globals, u as validate_each_argument, x as svg_element, y as xlink_attr, z as listen_dev, A as is_function, B as run_all, C as prevent_default, D as destroy_each, E as bubble, F as create_component, G as claim_component, H as mount_component, I as transition_in, J as transition_out, K as destroy_component, L as binding_callbacks, M as bind, q as query_selector_all, N as add_flush_callback, O as check_outros, P as add_render_callback, Q as create_in_transition, R as group_outros } from './client.77a6acdc.js';
import { f as fly } from './index.ff7bd4a9.js';

async function preload(url) {
    const adhoc = writable(new Promise(() => {}));

    // Fetch
    const res = await this.fetch(url);
    const data = await res.json();
    adhoc.set(Promise.resolve(data));

    return { adhoc };
}

/* src/routes/board/_post.svelte generated by Svelte v3.24.1 */

const file = "src/routes/board/_post.svelte";

// (17:3) {#if adhoc.hour}
function create_if_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("an hour");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "an hour");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(17:3) {#if adhoc.hour}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let a;
	let article;
	let h2;
	let t0_value = /*adhoc*/ ctx[0].title + "";
	let t0;
	let t1;
	let dl;
	let dt;
	let t2_value = /*adhoc*/ ctx[0].author + "";
	let t2;
	let dd;
	let t3_value = /*adhoc*/ ctx[0].city + "";
	let t3;
	let t4;
	let strong;
	let t5_value = /*adhoc*/ ctx[0].amount + "";
	let t5;
	let t6;
	let a_href_value;
	let t7;
	let hr;
	let if_block = /*adhoc*/ ctx[0].hour && create_if_block(ctx);

	const block = {
		c: function create() {
			a = element("a");
			article = element("article");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			dl = element("dl");
			dt = element("dt");
			t2 = text(t2_value);
			dd = element("dd");
			t3 = text(t3_value);
			t4 = space();
			strong = element("strong");
			t5 = text(t5_value);
			t6 = text("€\n\t\t\t");
			if (if_block) if_block.c();
			t7 = space();
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			article = claim_element(a_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			h2 = claim_element(article_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, t0_value);
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(article_nodes);
			dl = claim_element(article_nodes, "DL", {});
			var dl_nodes = children(dl);
			dt = claim_element(dl_nodes, "DT", {});
			var dt_nodes = children(dt);
			t2 = claim_text(dt_nodes, t2_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(dl_nodes, "DD", {});
			var dd_nodes = children(dd);
			t3 = claim_text(dd_nodes, t3_value);
			dd_nodes.forEach(detach_dev);
			dl_nodes.forEach(detach_dev);
			t4 = claim_space(article_nodes);
			strong = claim_element(article_nodes, "STRONG", { class: true });
			var strong_nodes = children(strong);
			t5 = claim_text(strong_nodes, t5_value);
			t6 = claim_text(strong_nodes, "€\n\t\t\t");
			if (if_block) if_block.l(strong_nodes);
			strong_nodes.forEach(detach_dev);
			article_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			hr = claim_element(nodes, "HR", {});
			this.h();
		},
		h: function hydrate() {
			attr_dev(h2, "class", "svelte-3u30rx");
			add_location(h2, file, 7, 2, 93);
			add_location(dt, file, 11, 3, 133);
			add_location(dd, file, 12, 3, 160);
			add_location(dl, file, 10, 2, 125);
			attr_dev(strong, "class", "svelte-3u30rx");
			add_location(strong, file, 14, 2, 192);
			attr_dev(article, "class", "svelte-3u30rx");
			add_location(article, file, 6, 1, 81);
			attr_dev(a, "href", a_href_value = "post/" + /*adhoc*/ ctx[0].id);
			attr_dev(a, "class", "svelte-3u30rx");
			add_location(a, file, 5, 0, 53);
			add_location(hr, file, 22, 0, 295);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, article);
			append_dev(article, h2);
			append_dev(h2, t0);
			append_dev(article, t1);
			append_dev(article, dl);
			append_dev(dl, dt);
			append_dev(dt, t2);
			append_dev(dl, dd);
			append_dev(dd, t3);
			append_dev(article, t4);
			append_dev(article, strong);
			append_dev(strong, t5);
			append_dev(strong, t6);
			if (if_block) if_block.m(strong, null);
			insert_dev(target, t7, anchor);
			insert_dev(target, hr, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*adhoc*/ 1 && t0_value !== (t0_value = /*adhoc*/ ctx[0].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*adhoc*/ 1 && t2_value !== (t2_value = /*adhoc*/ ctx[0].author + "")) set_data_dev(t2, t2_value);
			if (dirty & /*adhoc*/ 1 && t3_value !== (t3_value = /*adhoc*/ ctx[0].city + "")) set_data_dev(t3, t3_value);
			if (dirty & /*adhoc*/ 1 && t5_value !== (t5_value = /*adhoc*/ ctx[0].amount + "")) set_data_dev(t5, t5_value);

			if (/*adhoc*/ ctx[0].hour) {
				if (if_block) ; else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(strong, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*adhoc*/ 1 && a_href_value !== (a_href_value = "post/" + /*adhoc*/ ctx[0].id)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { adhoc } = $$props;
	const writable_props = ["adhoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Post> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Post", $$slots, []);

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
	};

	$$self.$capture_state = () => ({ adhoc });

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [adhoc];
}

class Post extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { adhoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Post",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*adhoc*/ ctx[0] === undefined && !("adhoc" in props)) {
			console.warn("<Post> was created without expected prop 'adhoc'");
		}
	}

	get adhoc() {
		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Filter.svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;
const file$1 = "src/components/Filter.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (61:4) {#each labels as label}
function create_each_block(ctx) {
	let input;
	let input_id_value;
	let input_value_value;
	let t0;
	let label;
	let svg;
	let use;
	let use_xlink_href_value;
	let t1;
	let t2_value = /*label*/ ctx[9] + "";
	let t2;
	let t3;
	let label_for_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			t0 = space();
			label = element("label");
			svg = svg_element("svg");
			use = svg_element("use");
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				id: true,
				name: true,
				type: true,
				value: true,
				class: true
			});

			t0 = claim_space(nodes);
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			svg = claim_element(label_nodes, "svg", { class: true }, 1);
			var svg_nodes = children(svg);
			use = claim_element(svg_nodes, "use", { "xlink:href": true }, 1);
			children(use).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			t1 = claim_space(label_nodes);
			t2 = claim_text(label_nodes, t2_value);
			t3 = claim_space(label_nodes);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "id", input_id_value = /*label*/ ctx[9]);
			attr_dev(input, "name", "checkbox");
			attr_dev(input, "type", "radio");
			input.__value = input_value_value = /*label*/ ctx[9];
			input.value = input.__value;
			attr_dev(input, "class", "svelte-1i1au96");
			/*$$binding_groups*/ ctx[7][0].push(input);
			add_location(input, file$1, 61, 8, 1432);
			xlink_attr(use, "xlink:href", use_xlink_href_value = "/sprite.svg#" + /*label*/ ctx[9]);
			add_location(use, file$1, 70, 17, 1667);
			attr_dev(svg, "class", "svelte-1i1au96");
			add_location(svg, file$1, 70, 12, 1662);
			attr_dev(label, "for", label_for_value = /*label*/ ctx[9]);
			attr_dev(label, "class", "svelte-1i1au96");
			add_location(label, file$1, 69, 8, 1630);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			input.checked = input.__value === /*ssnType*/ ctx[0];
			insert_dev(target, t0, anchor);
			insert_dev(target, label, anchor);
			append_dev(label, svg);
			append_dev(svg, use);
			append_dev(label, t1);
			append_dev(label, t2);
			append_dev(label, t3);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[6]),
					listen_dev(
						input,
						"change",
						function () {
							if (is_function(/*markit*/ ctx[1])) /*markit*/ ctx[1].apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*ssnType*/ 1) {
				input.checked = input.__value === /*ssnType*/ ctx[0];
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			/*$$binding_groups*/ ctx[7][0].splice(/*$$binding_groups*/ ctx[7][0].indexOf(input), 1);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(label);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(61:4) {#each labels as label}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let form;
	let mounted;
	let dispose;
	let each_value = /*labels*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			form = element("form");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(form_nodes);
			}

			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(form, "class", "svelte-1i1au96");
			add_location(form, file$1, 59, 0, 1364);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(form, null);
			}

			if (!mounted) {
				dispose = listen_dev(form, "submit", prevent_default(/*submit_handler*/ ctx[5]), false, true, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*labels, ssnType, markit*/ 7) {
				each_value = /*labels*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(form, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { adhoc } = $$props;
	let { adhocFiltered = [] } = $$props;

	// Props
	let labels = ["all", "coding", "design"];

	let ssnType;
	const writable_props = ["adhoc", "adhocFiltered"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Filter> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Filter", $$slots, []);
	const $$binding_groups = [[]];

	function submit_handler(event) {
		bubble($$self, event);
	}

	function input_change_handler() {
		ssnType = this.__value;
		$$invalidate(0, ssnType);
	}

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(4, adhoc = $$props.adhoc);
		if ("adhocFiltered" in $$props) $$invalidate(3, adhocFiltered = $$props.adhocFiltered);
	};

	$$self.$capture_state = () => ({
		adhoc,
		adhocFiltered,
		labels,
		ssnType,
		morbid,
		markit
	});

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(4, adhoc = $$props.adhoc);
		if ("adhocFiltered" in $$props) $$invalidate(3, adhocFiltered = $$props.adhocFiltered);
		if ("labels" in $$props) $$invalidate(2, labels = $$props.labels);
		if ("ssnType" in $$props) $$invalidate(0, ssnType = $$props.ssnType);
		if ("morbid" in $$props) morbid = $$props.morbid;
		if ("markit" in $$props) $$invalidate(1, markit = $$props.markit);
	};

	let morbid;
	let markit;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ssnType, adhoc*/ 17) {
			// Filtering
			// $: adhocFiltered = adhoc.filter((tag) => tag.type === ssnType);
			 morbid = () => {
				if (ssnType) {
					$$invalidate(3, adhocFiltered = adhoc.filter(tag => tag.type === ssnType));
				}
			};
		}

		if ($$self.$$.dirty & /*ssnType*/ 1) {
			// Mark Checkbox
			 $$invalidate(1, markit = async () => {
				if (!sessionStorage.getItem(ssnType)) {
					return sessionStorage.setItem("ssnType", ssnType);
				}
			});
		}

		if ($$self.$$.dirty & /*ssnType*/ 1) {
			// DEVELOPMENT
			 console.log("%c ssnType ", "color:red; font-weight:bold; font-size:14px", ssnType);
		}

		if ($$self.$$.dirty & /*adhocFiltered*/ 8) {
			 console.log("%c adhocFiltered ", "color:green; font-weight:bold; font-size:14px", adhocFiltered);
		}
	};

	 (async () => {
		if (typeof window !== "undefined") {
			if (!sessionStorage.getItem("ssnType")) {
				return $$invalidate(0, ssnType = "all");
			} else {
				return $$invalidate(0, ssnType = sessionStorage.getItem("ssnType"));
			}
		}
	})();

	return [
		ssnType,
		markit,
		labels,
		adhocFiltered,
		adhoc,
		submit_handler,
		input_change_handler,
		$$binding_groups
	];
}

class Filter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, not_equal, { adhoc: 4, adhocFiltered: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Filter",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*adhoc*/ ctx[4] === undefined && !("adhoc" in props)) {
			console_1.warn("<Filter> was created without expected prop 'adhoc'");
		}
	}

	get adhoc() {
		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get adhocFiltered() {
		throw new Error("<Filter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhocFiltered(value) {
		throw new Error("<Filter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/board/[page].svelte generated by Svelte v3.24.1 */

const { console: console_1$1 } = globals;
const file$2 = "src/routes/board/[page].svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (67:2) {:else}
function create_else_block(ctx) {
	let h1;
	let t;

	const block = {
		c: function create() {
			h1 = element("h1");
			t = text("List ended");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t = claim_text(h1_nodes, "List ended");
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$2, 67, 3, 1634);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(67:2) {:else}",
		ctx
	});

	return block;
}

// (64:2) {#if adhoc.length > 0}
function create_if_block_1(ctx) {
	let h1;
	let t0;
	let t1;
	let p;
	let t2;

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text("Job board");
			t1 = space();
			p = element("p");
			t2 = text("Use filter for easier find");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Job board");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Use filter for easier find");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h1, file$2, 64, 3, 1565);
			add_location(p, file$2, 65, 3, 1587);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(64:2) {#if adhoc.length > 0}",
		ctx
	});

	return block;
}

// (73:2) {#each adhoc as adhoc}
function create_each_block$1(ctx) {
	let post;
	let current;

	post = new Post({
			props: { adhoc: /*adhoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(post.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(post.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(post, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const post_changes = {};
			if (dirty & /*adhoc*/ 1) post_changes.adhoc = /*adhoc*/ ctx[0];
			post.$set(post_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(post.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(post.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(post, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(73:2) {#each adhoc as adhoc}",
		ctx
	});

	return block;
}

// (77:1) {#if next && adhoc.length === limit}
function create_if_block$1(ctx) {
	let a;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			t = text("Next page");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, "Next page");
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "more svelte-z8qrf9");
			attr_dev(a, "href", /*next*/ ctx[2]);
			add_location(a, file$2, 77, 2, 1806);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*next*/ 4) {
				attr_dev(a, "href", /*next*/ ctx[2]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(77:1) {#if next && adhoc.length === limit}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let t0;
	let section;
	let header;
	let t1;
	let filter;
	let updating_adhoc;
	let t2;
	let div;
	let t3;
	let section_intro;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*adhoc*/ ctx[0].length > 0) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function filter_adhoc_binding(value) {
		/*filter_adhoc_binding*/ ctx[4].call(null, value);
	}

	let filter_props = {};

	if (/*adhoc*/ ctx[0] !== void 0) {
		filter_props.adhoc = /*adhoc*/ ctx[0];
	}

	filter = new Filter({ props: filter_props, $$inline: true });
	binding_callbacks.push(() => bind(filter, "adhoc", filter_adhoc_binding));
	let each_value = /*adhoc*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block1 = /*next*/ ctx[2] && /*adhoc*/ ctx[0].length === /*limit*/ ctx[1] && create_if_block$1(ctx);

	const block = {
		c: function create() {
			t0 = space();
			section = element("section");
			header = element("header");
			if_block0.c();
			t1 = space();
			create_component(filter.$$.fragment);
			t2 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1mlai1k\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			if_block0.l(header_nodes);
			header_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			claim_component(filter.$$.fragment, section_nodes);
			t2 = claim_space(section_nodes);
			div = claim_element(section_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			if (if_block1) if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Board";
			attr_dev(header, "class", "svelte-z8qrf9");
			add_location(header, file$2, 62, 1, 1528);
			attr_dev(div, "class", "svelte-z8qrf9");
			add_location(div, file$2, 71, 1, 1697);
			attr_dev(section, "class", "svelte-z8qrf9");
			add_location(section, file$2, 61, 0, 1471);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, header);
			if_block0.m(header, null);
			append_dev(section, t1);
			mount_component(filter, section, null);
			append_dev(section, t2);
			append_dev(section, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(section, t3);
			if (if_block1) if_block1.m(section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(header, null);
				}
			}

			const filter_changes = {};

			if (!updating_adhoc && dirty & /*adhoc*/ 1) {
				updating_adhoc = true;
				filter_changes.adhoc = /*adhoc*/ ctx[0];
				add_flush_callback(() => updating_adhoc = false);
			}

			filter.$set(filter_changes);

			if (dirty & /*adhoc*/ 1) {
				each_value = /*adhoc*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*next*/ ctx[2] && /*adhoc*/ ctx[0].length === /*limit*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(filter.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!section_intro) {
				add_render_callback(() => {
					section_intro = create_in_transition(section, fly, { duration: 320, y: 40, opacity: 1 });
					section_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(filter.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			if_block0.d();
			destroy_component(filter);
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const res = preload(`https://6016e904f534300017a4509d.mockapi.io/board?page=1&limit=50`);
	let { adhoc = [] } = $$props;
	let { page } = $$props;
	let { limit } = $$props;
	const writable_props = ["adhoc", "page", "limit"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<U5Bpageu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bpageu5D", $$slots, []);

	function filter_adhoc_binding(value) {
		adhoc = value;
		$$invalidate(0, adhoc);
	}

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("limit" in $$props) $$invalidate(1, limit = $$props.limit);
	};

	$$self.$capture_state = () => ({
		preload,
		fly,
		Post,
		Filter,
		res,
		adhoc,
		page,
		limit,
		next
	});

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("limit" in $$props) $$invalidate(1, limit = $$props.limit);
		if ("next" in $$props) $$invalidate(2, next = $$props.next);
	};

	let next;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*page*/ 8) {
			// Load More
			 $$invalidate(2, next = `/board/${+page + 1}`);
		}

		if ($$self.$$.dirty & /*adhoc*/ 1) {
			// DEVELOPER_CONSOLE_LOG
			 console.log("%c BROWSE adhoc ", "color:blue; font-weight:bold; font-size:14px", adhoc);
		}
	};

	return [adhoc, limit, next, page, filter_adhoc_binding];
}

class U5Bpageu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, not_equal, { adhoc: 0, page: 3, limit: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bpageu5D",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*page*/ ctx[3] === undefined && !("page" in props)) {
			console_1$1.warn("<U5Bpageu5D> was created without expected prop 'page'");
		}

		if (/*limit*/ ctx[1] === undefined && !("limit" in props)) {
			console_1$1.warn("<U5Bpageu5D> was created without expected prop 'limit'");
		}
	}

	get adhoc() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get page() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get limit() {
		throw new Error("<U5Bpageu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set limit(value) {
		throw new Error("<U5Bpageu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bpageu5D;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

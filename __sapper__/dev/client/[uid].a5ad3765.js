import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, a as space, o as svg_element, f as claim_element, g as children, h as claim_text, b as detach_dev, c as claim_space, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, p as listen_dev, r as is_function, u as prop_dev, n as noop, w as run_all, x as not_equal, y as validate_each_argument, z as set_data_dev, A as xlink_attr, B as create_component, q as query_selector_all, C as claim_component, D as mount_component, E as transition_in, F as add_render_callback, G as create_in_transition, H as transition_out, I as destroy_each, J as destroy_component } from './client.f5b9cdd4.js';
import { f as fly } from './index.ff7bd4a9.js';

/* src/components/Button.svelte generated by Svelte v3.24.1 */

const file = "src/components/Button.svelte";

function create_fragment(ctx) {
	let div;
	let a;
	let t0;
	let t1;
	let label;
	let input;
	let input_value_value;
	let t2;
	let svg;
	let path;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t0 = text("Open map");
			t1 = space();
			label = element("label");
			input = element("input");
			t2 = space();
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a = claim_element(div_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, "Open map");
			a_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			label = claim_element(div_nodes, "LABEL", { class: true });
			var label_nodes = children(label);

			input = claim_element(label_nodes, "INPUT", {
				type: true,
				value: true,
				name: true,
				"aria-pressed": true,
				class: true
			});

			t2 = claim_space(label_nodes);

			svg = claim_element(
				label_nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					viewBox: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			label_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", /*link*/ ctx[2]);
			attr_dev(a, "class", "svelte-1nryng2");
			add_location(a, file, 112, 1, 2297);
			attr_dev(input, "type", "checkbox");
			input.__value = input_value_value = /*adhoc*/ ctx[1].id;
			input.value = input.__value;
			attr_dev(input, "name", "save");
			attr_dev(input, "aria-pressed", "false");
			attr_dev(input, "class", "svelte-1nryng2");
			add_location(input, file, 114, 2, 2336);
			attr_dev(path, "d", "M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z");
			add_location(path, file, 122, 179, 2692);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "#000000");
			attr_dev(svg, "stroke-width", "2");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "svelte-1nryng2");
			add_location(svg, file, 122, 3, 2516);
			attr_dev(label, "class", "svelte-1nryng2");
			add_location(label, file, 113, 1, 2326);
			attr_dev(div, "class", "svelte-1nryng2");
			add_location(div, file, 111, 0, 2290);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t0);
			append_dev(div, t1);
			append_dev(div, label);
			append_dev(label, input);
			input.checked = /*state*/ ctx[0];
			append_dev(label, t2);
			append_dev(label, svg);
			append_dev(svg, path);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_handler*/ ctx[4], false, false, false),
					listen_dev(
						input,
						"click",
						function () {
							if (is_function(/*pin*/ ctx[3])) /*pin*/ ctx[3].apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(input, "change", /*input_change_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*link*/ 4) {
				attr_dev(a, "href", /*link*/ ctx[2]);
			}

			if (dirty & /*adhoc*/ 2 && input_value_value !== (input_value_value = /*adhoc*/ ctx[1].id)) {
				prop_dev(input, "__value", input_value_value);
				input.value = input.__value;
			}

			if (dirty & /*state*/ 1) {
				input.checked = /*state*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { adhoc } = $$props;
	let { link } = $$props;
	let { state = false } = $$props;
	const writable_props = ["adhoc", "link", "state"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Button> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Button", $$slots, []);
	const input_handler = () => navigator.vibrate(10);

	function input_change_handler() {
		state = this.checked;
		($$invalidate(0, state), $$invalidate(1, adhoc));
	}

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(1, adhoc = $$props.adhoc);
		if ("link" in $$props) $$invalidate(2, link = $$props.link);
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
	};

	$$self.$capture_state = () => ({ adhoc, link, state, pin });

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(1, adhoc = $$props.adhoc);
		if ("link" in $$props) $$invalidate(2, link = $$props.link);
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
		if ("pin" in $$props) $$invalidate(3, pin = $$props.pin);
	};

	let pin;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*adhoc*/ 2) {
			// Check Local Storage
			 (async () => {
				if (typeof window !== "undefined") {
					if (localStorage.getItem(adhoc.id, "Saved")) {
						return $$invalidate(0, state = true);
					} else {
						return $$invalidate(0, state = false);
					}
				}
			})();
		}

		if ($$self.$$.dirty & /*adhoc*/ 2) {
			// Mark Checkbox
			 $$invalidate(3, pin = async () => {
				if (!localStorage.getItem(adhoc.id)) {
					return localStorage.setItem(adhoc.id, "Saved");
				} else {
					return localStorage.removeItem(adhoc.id, "Saved");
				}
			});
		}
	};

	return [state, adhoc, link, pin, input_handler, input_change_handler];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { adhoc: 1, link: 2, state: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*adhoc*/ ctx[1] === undefined && !("adhoc" in props)) {
			console.warn("<Button> was created without expected prop 'adhoc'");
		}

		if (/*link*/ ctx[2] === undefined && !("link" in props)) {
			console.warn("<Button> was created without expected prop 'link'");
		}
	}

	get adhoc() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get link() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set link(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get state() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set state(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/locations/[uid].svelte generated by Svelte v3.24.1 */
const file$1 = "src/routes/locations/[uid].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (126:3) {#if adhoc.phone != null}
function create_if_block_4(ctx) {
	let t_value = /*adhoc*/ ctx[0].phone + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*adhoc*/ 1 && t_value !== (t_value = /*adhoc*/ ctx[0].phone + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(126:3) {#if adhoc.phone != null}",
		ctx
	});

	return block;
}

// (141:29) 
function create_if_block_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toilet");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toilet");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(141:29) ",
		ctx
	});

	return block;
}

// (139:31) 
function create_if_block_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Pets allowed");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Pets allowed");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(139:31) ",
		ctx
	});

	return block;
}

// (137:30) 
function create_if_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Paid services");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Paid services");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(137:30) ",
		ctx
	});

	return block;
}

// (135:5) {#if icon === "water"}
function create_if_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Water source");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Water source");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(135:5) {#if icon === \\\"water\\\"}",
		ctx
	});

	return block;
}

// (132:3) {#each adhoc.tags as icon}
function create_each_block(ctx) {
	let li;
	let svg;
	let use;
	let use_xlink_href_value;
	let t0;
	let t1;

	function select_block_type(ctx, dirty) {
		if (/*icon*/ ctx[3] === "water") return create_if_block;
		if (/*icon*/ ctx[3] === "fee") return create_if_block_1;
		if (/*icon*/ ctx[3] === "pets") return create_if_block_2;
		if (/*icon*/ ctx[3] === "wc") return create_if_block_3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			li = element("li");
			svg = svg_element("svg");
			use = svg_element("use");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			svg = claim_element(li_nodes, "svg", { class: true }, 1);
			var svg_nodes = children(svg);
			use = claim_element(svg_nodes, "use", { "xlink:href": true }, 1);
			children(use).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			t0 = claim_space(li_nodes);
			if (if_block) if_block.l(li_nodes);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			xlink_attr(use, "xlink:href", use_xlink_href_value = "/sprite.svg#" + /*icon*/ ctx[3]);
			add_location(use, file$1, 133, 10, 3646);
			attr_dev(svg, "class", "svelte-qxeobu");
			add_location(svg, file$1, 133, 5, 3641);
			attr_dev(li, "class", "svelte-qxeobu");
			add_location(li, file$1, 132, 4, 3631);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, svg);
			append_dev(svg, use);
			append_dev(li, t0);
			if (if_block) if_block.m(li, null);
			append_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*adhoc*/ 1 && use_xlink_href_value !== (use_xlink_href_value = "/sprite.svg#" + /*icon*/ ctx[3])) {
				xlink_attr(use, "xlink:href", use_xlink_href_value);
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(li, t1);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);

			if (if_block) {
				if_block.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(132:3) {#each adhoc.tags as icon}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let title_value;
	let t0;
	let div;
	let section;
	let header;
	let em;
	let t1_value = /*adhoc*/ ctx[0].type + "";
	let t1;
	let t2;
	let h2;
	let t3_value = /*adhoc*/ ctx[0].title + "";
	let t3;
	let t4;
	let dl;
	let dt;
	let t5_value = /*adhoc*/ ctx[0].author + "";
	let t5;
	let dd;
	let t6_value = /*adhoc*/ ctx[0].city + "";
	let t6;
	let t7;
	let t8_value = /*adhoc*/ ctx[0].country + "";
	let t8;
	let t9;
	let p;
	let t10;
	let t11;
	let hr0;
	let t12;
	let address;
	let t13_value = /*adhoc*/ ctx[0].email + "";
	let t13;
	let t14;
	let br;
	let t15;
	let t16;
	let hr1;
	let t17;
	let ul;
	let t18;
	let button;
	let div_intro;
	let current;
	document.title = title_value = /*adhoc*/ ctx[0].title;
	let if_block = /*adhoc*/ ctx[0].phone != null && create_if_block_4(ctx);
	let each_value = /*adhoc*/ ctx[0].tags;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	button = new Button({
			props: {
				adhoc: /*adhoc*/ ctx[0],
				link: /*link*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			section = element("section");
			header = element("header");
			em = element("em");
			t1 = text(t1_value);
			t2 = space();
			h2 = element("h2");
			t3 = text(t3_value);
			t4 = space();
			dl = element("dl");
			dt = element("dt");
			t5 = text(t5_value);
			dd = element("dd");
			t6 = text(t6_value);
			t7 = text(", ");
			t8 = text(t8_value);
			t9 = space();
			p = element("p");
			t10 = text("Voluptate ea aliquip nisi consequat ipsum ipsum enim non Lorem.\n\t\t\tNulla ullamco ut nostrud Lorem quis officia dolore adipisicing.\n\t\t\tEx Lorem officia reprehenderit velit aute voluptate aliquip\n\t\t\texercitation in. Nulla anim ex amet do aliqua sunt laborum anim\n\t\t\tad. Cupidatat voluptate deserunt sint elit ipsum aliquip aliquip\n\t\t\texcepteur. Elit irure sunt eu proident sit. Consectetur in\n\t\t\tconsectetur ex sint exercitation enim amet laboris nisi. Cillum\n\t\t\tesse non ut id quis aliquip duis amet officia eu irure aliquip\n\t\t\tsint quis. Magna voluptate dolor in esse aliqua esse adipisicing\n\t\t\tcommodo. Amet laboris id sit pariatur labore nostrud laborum\n\t\t\tvelit exercitation ea veniam minim mollit duis. Voluptate ea aliquip nisi consequat ipsum ipsum enim non Lorem.\n\t\t\tNulla ullamco ut nostrud Lorem quis officia dolore adipisicing.\n\t\t\tEx Lorem officia reprehenderit velit aute voluptate aliquip\n\t\t\texercitation in. Nulla anim ex amet do aliqua sunt laborum anim\n\t\t\tad. Cupidatat voluptate deserunt sint elit ipsum aliquip aliquip\n\t\t\texcepteur. Elit irure sunt eu proident sit. Consectetur in\n\t\t\tconsectetur ex sint exercitation enim amet laboris nisi. Cillum\n\t\t\tesse non ut id quis aliquip duis amet officia eu irure aliquip\n\t\t\tsint quis. Magna voluptate dolor in esse aliqua esse adipisicing\n\t\t\tcommodo. Amet laboris id sit pariatur labore nostrud laborum\n\t\t\tvelit exercitation ea veniam minim mollit duis.");
			t11 = space();
			hr0 = element("hr");
			t12 = space();
			address = element("address");
			t13 = text(t13_value);
			t14 = space();
			br = element("br");
			t15 = space();
			if (if_block) if_block.c();
			t16 = space();
			hr1 = element("hr");
			t17 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t18 = space();
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-w6u6cv\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			section = claim_element(div_nodes, "SECTION", {});
			var section_nodes = children(section);
			header = claim_element(section_nodes, "HEADER", { class: true });
			var header_nodes = children(header);
			em = claim_element(header_nodes, "EM", {});
			var em_nodes = children(em);
			t1 = claim_text(em_nodes, t1_value);
			em_nodes.forEach(detach_dev);
			t2 = claim_space(header_nodes);
			h2 = claim_element(header_nodes, "H2", {});
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, t3_value);
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(header_nodes);
			dl = claim_element(header_nodes, "DL", {});
			var dl_nodes = children(dl);
			dt = claim_element(dl_nodes, "DT", {});
			var dt_nodes = children(dt);
			t5 = claim_text(dt_nodes, t5_value);
			dt_nodes.forEach(detach_dev);
			dd = claim_element(dl_nodes, "DD", {});
			var dd_nodes = children(dd);
			t6 = claim_text(dd_nodes, t6_value);
			t7 = claim_text(dd_nodes, ", ");
			t8 = claim_text(dd_nodes, t8_value);
			dd_nodes.forEach(detach_dev);
			dl_nodes.forEach(detach_dev);
			header_nodes.forEach(detach_dev);
			t9 = claim_space(section_nodes);
			p = claim_element(section_nodes, "P", { class: true });
			var p_nodes = children(p);
			t10 = claim_text(p_nodes, "Voluptate ea aliquip nisi consequat ipsum ipsum enim non Lorem.\n\t\t\tNulla ullamco ut nostrud Lorem quis officia dolore adipisicing.\n\t\t\tEx Lorem officia reprehenderit velit aute voluptate aliquip\n\t\t\texercitation in. Nulla anim ex amet do aliqua sunt laborum anim\n\t\t\tad. Cupidatat voluptate deserunt sint elit ipsum aliquip aliquip\n\t\t\texcepteur. Elit irure sunt eu proident sit. Consectetur in\n\t\t\tconsectetur ex sint exercitation enim amet laboris nisi. Cillum\n\t\t\tesse non ut id quis aliquip duis amet officia eu irure aliquip\n\t\t\tsint quis. Magna voluptate dolor in esse aliqua esse adipisicing\n\t\t\tcommodo. Amet laboris id sit pariatur labore nostrud laborum\n\t\t\tvelit exercitation ea veniam minim mollit duis. Voluptate ea aliquip nisi consequat ipsum ipsum enim non Lorem.\n\t\t\tNulla ullamco ut nostrud Lorem quis officia dolore adipisicing.\n\t\t\tEx Lorem officia reprehenderit velit aute voluptate aliquip\n\t\t\texercitation in. Nulla anim ex amet do aliqua sunt laborum anim\n\t\t\tad. Cupidatat voluptate deserunt sint elit ipsum aliquip aliquip\n\t\t\texcepteur. Elit irure sunt eu proident sit. Consectetur in\n\t\t\tconsectetur ex sint exercitation enim amet laboris nisi. Cillum\n\t\t\tesse non ut id quis aliquip duis amet officia eu irure aliquip\n\t\t\tsint quis. Magna voluptate dolor in esse aliqua esse adipisicing\n\t\t\tcommodo. Amet laboris id sit pariatur labore nostrud laborum\n\t\t\tvelit exercitation ea veniam minim mollit duis.");
			p_nodes.forEach(detach_dev);
			t11 = claim_space(section_nodes);
			hr0 = claim_element(section_nodes, "HR", {});
			t12 = claim_space(section_nodes);
			address = claim_element(section_nodes, "ADDRESS", {});
			var address_nodes = children(address);
			t13 = claim_text(address_nodes, t13_value);
			t14 = claim_space(address_nodes);
			br = claim_element(address_nodes, "BR", {});
			t15 = claim_space(address_nodes);
			if (if_block) if_block.l(address_nodes);
			address_nodes.forEach(detach_dev);
			t16 = claim_space(section_nodes);
			hr1 = claim_element(section_nodes, "HR", {});
			t17 = claim_space(section_nodes);
			ul = claim_element(section_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			t18 = claim_space(div_nodes);
			claim_component(button.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(em, file$1, 91, 3, 1892);
			add_location(h2, file$1, 92, 3, 1917);
			add_location(dt, file$1, 94, 4, 1952);
			add_location(dd, file$1, 95, 4, 1980);
			add_location(dl, file$1, 93, 3, 1943);
			attr_dev(header, "class", "svelte-qxeobu");
			add_location(header, file$1, 90, 2, 1880);
			attr_dev(p, "class", "svelte-qxeobu");
			add_location(p, file$1, 98, 2, 2042);
			add_location(hr0, file$1, 121, 2, 3472);
			add_location(br, file$1, 124, 3, 3509);
			add_location(address, file$1, 122, 2, 3479);
			add_location(hr1, file$1, 129, 2, 3585);
			attr_dev(ul, "class", "svelte-qxeobu");
			add_location(ul, file$1, 130, 2, 3592);
			add_location(section, file$1, 89, 1, 1868);
			attr_dev(div, "class", "svelte-qxeobu");
			add_location(div, file$1, 88, 0, 1815);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, section);
			append_dev(section, header);
			append_dev(header, em);
			append_dev(em, t1);
			append_dev(header, t2);
			append_dev(header, h2);
			append_dev(h2, t3);
			append_dev(header, t4);
			append_dev(header, dl);
			append_dev(dl, dt);
			append_dev(dt, t5);
			append_dev(dl, dd);
			append_dev(dd, t6);
			append_dev(dd, t7);
			append_dev(dd, t8);
			append_dev(section, t9);
			append_dev(section, p);
			append_dev(p, t10);
			append_dev(section, t11);
			append_dev(section, hr0);
			append_dev(section, t12);
			append_dev(section, address);
			append_dev(address, t13);
			append_dev(address, t14);
			append_dev(address, br);
			append_dev(address, t15);
			if (if_block) if_block.m(address, null);
			append_dev(section, t16);
			append_dev(section, hr1);
			append_dev(section, t17);
			append_dev(section, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(div, t18);
			mount_component(button, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if ((!current || dirty & /*adhoc*/ 1) && title_value !== (title_value = /*adhoc*/ ctx[0].title)) {
				document.title = title_value;
			}

			if ((!current || dirty & /*adhoc*/ 1) && t1_value !== (t1_value = /*adhoc*/ ctx[0].type + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*adhoc*/ 1) && t3_value !== (t3_value = /*adhoc*/ ctx[0].title + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*adhoc*/ 1) && t5_value !== (t5_value = /*adhoc*/ ctx[0].author + "")) set_data_dev(t5, t5_value);
			if ((!current || dirty & /*adhoc*/ 1) && t6_value !== (t6_value = /*adhoc*/ ctx[0].city + "")) set_data_dev(t6, t6_value);
			if ((!current || dirty & /*adhoc*/ 1) && t8_value !== (t8_value = /*adhoc*/ ctx[0].country + "")) set_data_dev(t8, t8_value);
			if ((!current || dirty & /*adhoc*/ 1) && t13_value !== (t13_value = /*adhoc*/ ctx[0].email + "")) set_data_dev(t13, t13_value);

			if (/*adhoc*/ ctx[0].phone != null) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(address, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*adhoc*/ 1) {
				each_value = /*adhoc*/ ctx[0].tags;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const button_changes = {};
			if (dirty & /*adhoc*/ 1) button_changes.adhoc = /*adhoc*/ ctx[0];
			if (dirty & /*link*/ 2) button_changes.link = /*link*/ ctx[1];
			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);

			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fly, { duration: 320, y: 40, opacity: 1 });
					div_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	// URL + ID
	const { uid } = page.params;

	const url = "https://6016e904f534300017a4509d.mockapi.io/board/" + uid;

	// Fetch
	const res = await this.fetch(url);

	// Validate
	if (res.status === 200) {
		const adhoc = await res.json();
		return { adhoc };
	}

	// Error
	this.error(500, "Problems with server. Be right back soon ;)");
}

function instance$1($$self, $$props, $$invalidate) {
	let { adhoc } = $$props;
	let { link = "javascript:;" } = $$props;

	// Back
	const historyback = () => {
		if (typeof window !== "undefined") {
			window.history.back();
		}
	};

	const writable_props = ["adhoc", "link"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Buidu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Buidu5D", $$slots, []);

	$$self.$$set = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("link" in $$props) $$invalidate(1, link = $$props.link);
	};

	$$self.$capture_state = () => ({
		preload,
		fly,
		Button,
		adhoc,
		link,
		historyback
	});

	$$self.$inject_state = $$props => {
		if ("adhoc" in $$props) $$invalidate(0, adhoc = $$props.adhoc);
		if ("link" in $$props) $$invalidate(1, link = $$props.link);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [adhoc, link];
}

class U5Buidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, not_equal, { adhoc: 0, link: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Buidu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*adhoc*/ ctx[0] === undefined && !("adhoc" in props)) {
			console.warn("<U5Buidu5D> was created without expected prop 'adhoc'");
		}
	}

	get adhoc() {
		throw new Error("<U5Buidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set adhoc(value) {
		throw new Error("<U5Buidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get link() {
		throw new Error("<U5Buidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set link(value) {
		throw new Error("<U5Buidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Buidu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
